// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Veterinarian {
  id_veterinarian Int    @id @default(autoincrement())
  names           String
  last_names      String
  clinic_name     String
  cellphone       String

  pets Pet[]
}

model Pet {
  id_pet          Int      @id @default(autoincrement())
  id_owner        Int
  id_veterinarian Int
  name            String
  birthday        DateTime @db.Date
  sex             Sex
  breed           String
  coat_color      String
  extra_data      String?

  owner        Owner        @relation(fields: [id_owner], references: [id_owner], onDelete: Cascade)
  veterinarian Veterinarian @relation(fields: [id_veterinarian], references: [id_veterinarian])

  entries Entry[]

  @@index([id_owner], name: "idx_id_owner")
  @@index([id_veterinarian], name: "idx_id_veterinarian")
}

model Owner {
  id_owner   Int     @id @default(autoincrement())
  names      String
  last_names String
  home       String
  cellphone  String
  email      String
  facebook   String?
  references String?

  pets Pet[]
}

model Entry {
  id_entry          Int      @id @default(autoincrement())
  id_pet            Int
  entry_date        DateTime @db.Timestamp()
  exit_date         DateTime @db.Timestamp()
  annotations       String?
  total             Decimal  @db.Decimal(5, 2)
  advance_payment   Decimal  @default(0) @db.Decimal(5, 2)
  notification_seen Boolean  @default(false)

  pet Pet @relation(fields: [id_pet], references: [id_pet], onDelete: Cascade)

  questionnaires Questionnaire[]
  services       Service[]

  @@index([id_pet], name: "idx_id_pet")
}

model Service {
  id_service  Int     @id @default(autoincrement())
  name        String
  description String?

  entries Entry[]
}

model Questionnaire {
  id_questionnaire Int     @id @default(autoincrement())
  id_entry         Int
  id_question      Int
  answer           String?

  entry    Entry    @relation(fields: [id_entry], references: [id_entry], onDelete: Cascade)
  question Question @relation(fields: [id_question], references: [id_question], onDelete: Cascade)

  @@unique([id_entry, id_question])
  @@index([id_entry], name: "idx_id_entry")
  @@index([id_question], name: "idx_id_question")
}

model Question {
  id_question    Int             @id @default(autoincrement())
  text           String
  questionnaires Questionnaire[]
}

enum Sex {
  M
  F
}
